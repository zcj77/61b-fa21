1a. Results for InsertRandomSpeedTest for N = 1000000:
Inserting 1000000 random length 10 Strings into a StringSet of type BSTStringSet
Took: 0.74 sec.
Inserting 1000000 random length 10 Strings into a StringSet of type ECHashStringSet
Took: 0.43 sec.
Inserting 1000000 random length 10 Strings into a StringSet of type java.util.TreeSet
Took: 0.82 sec.
Inserting 1000000 random length 10 Strings into a StringSet of type java.util.HashSet
Took: 0.28 sec.


1b. Results for InsertRandomSpeedTest for N = 2000000:
Inserting 2000000 random length 10 Strings into a StringSet of type BSTStringSet
Took: 1.80 sec.
Inserting 2000000 random length 10 Strings into a StringSet of type ECHashStringSet
Took: 0.79 sec.
Inserting 2000000 random length 10 Strings into a StringSet of type java.util.TreeSet
Took: 1.83 sec.
Inserting 2000000 random length 10 Strings into a StringSet of type java.util.HashSet
Took: 0.65 sec.


1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?
It looks roughly linear because the runtime for N=2000000 is twice the runtime for N=1000000;



2a. Results for InsertInOrderSpeedTest for N = 10000:
Inserting 10000 in-order strings into a StringSet of type BSTStringSet
Took: 0.21 sec.
Inserting 10000 in-order strings into a StringSet of type ECHashStringSet
Took: 0.01 sec.
Inserting 10000 in-order strings Strings into a StringSet of type java.util.TreeSet
Took: 0.01 sec.
Inserting 10000 in-order strings Strings into a StringSet of type java.util.HashSet
Took: 0.00 sec.


2b. Results for InsertInOrderSpeedTest for N = 20000:
Inserting 20000 in-order strings into a StringSet of type BSTStringSet
Took: 0.57 sec.
Inserting 20000 in-order strings into a StringSet of type ECHashStringSet
Took: 0.01 sec.
Inserting 20000 in-order strings Strings into a StringSet of type java.util.TreeSet
Took: 0.02 sec.
Inserting 20000 in-order strings Strings into a StringSet of type java.util.HashSet
Took: 0.02 sec.


2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?
It is roughly linear because the runtime for N=20000 is about 2.5 times than that for N=10000

Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).